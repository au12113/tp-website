version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
jobs:
  scan_and_build_frontend:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - run:
          name: scan and build
          command: |
            cd frontend 
            npm install --legacy-peer-deps
            npm audit fix
            npm install
      # npm run build
      # run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  scan_backend:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - run:
          name: scan and install dependencies
          command: |
            cd backend
            npm install
            npm audit fix
            npm install
      # run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy_frontend:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - run:
          name: install ftp client
          command: |
            sudo apt-get install ncftp
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: build frontend
          command: |
            cd frontend
            npm run build
            ncftpput -R -v -u $FTP_USER -p $FTP_PASSWORD $FTP_URL domains/isuzu-tpubon.com/public_html build/*

  build_backend_docker_image:
    docker:
      - image: circleci/node:14.17.6
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - restore_cache:
          keys: ['backend-build']
      - run:
          name: build backend image and run
          command: |
            cd backend
            dockerpath="wasupont/tp-backend"
            docker build --tag tp-backend .
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
            echo "Docker ID and Image: $dockerpath"
            docker image tag tp-backend $dockerpath
            docker image push $dockerpath
            docker run -d -p 3000:3000 -p 3306:3306 -e ENV=DEBUG wasupont/tp-backend

  build_and_push_backend_image:
    docker:
      - image: circleci/python:3.8.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - restore_cache:
          keys: ['backend-build']
      - run:
          name: Install dependencies
          command: |
            pip install awscli docker-compose
      - run:
          name: map data to environment file
          command: |
            cd backend
            touch .env
            echo DB_URI=${DB_URI} > .env
            echo DB_USER=${DB_USER} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo DB_NAME=${DB_NAME} >> .env
      - run:
          name: build and push image to ECR
          command: |
            cd backend
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j1g2j9e9
            docker build -t tp-website:latest .
            docker tag tp-website:latest public.ecr.aws/j1g2j9e9/tp-website:latest
            docker push public.ecr.aws/j1g2j9e9/tp-website:latest
  deploy_backend:
    docker:
      - image: circleci/python:3.8.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install sed
      - kubernetes/install
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - run:
          name: Deploy VPC and SecurityGroup
          command: |
            aws cloudformation deploy --template-file .circleci/script/vpc.yaml --stack-name tp-website-vpc
      - run:
          name: Get VPC Output for EKS
          command: |
            export AWS_VPC=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)
            export AWS_SG=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SecurityGroups'].OutputValue" --output text)
            export AWS_Subnet_01=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SubnetId01'].OutputValue" --output text)
            export AWS_Subnet_02=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SubnetId02'].OutputValue" --output text)
            sed -i "s/AWS_VPC/${AWS_VPC}/" .circleci/script/eks.yaml
            sed -i "s/AWS_SG/${AWS_SG}/" .circleci/script/eks.yaml
            sed -i "s/AWS_Subnet_01/${AWS_Subnet_01}/" .circleci/script/eks.yaml
            sed -i "s/AWS_Subnet_02/${AWS_Subnet_02}/" .circleci/script/eks.yaml
      - run:
          name: Create EKS cluster
          command: |
            eksctl create cluster -f .circleci/script/eks.yaml
      - run:
          name: Apply deployment and service config
          command: |
            kubectl apply -f .circleci/script/deployment.yaml
            kubectl apply -f .circleci/script/service.yaml

workflows:
  default:
    jobs:
      # - scan_and_build_frontend
      - scan_backend
      # - deploy_frontend:
      #     requires: [scan_and_build_frontend]
      - build_and_push_backend_image:
          requires: [scan_backend]
      - deploy_backend:
          requires: [build_and_push_backend_image]