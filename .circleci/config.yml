version: 2.1
orbs:
  cloud-run: circleci/gcp-cloud-run@1.0.2
  docker: circleci/docker@1.7.0
jobs:
  scan_and_build_frontend:
    docker:
      - image: circleci/node:14.17.6
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: scan and install dependencies
          command: |
            cd ~/project/frontend
            npm install --legacy-peer-deps
            npm audit fix
            npm install
      - run:
          name: lint
          command: |
            cd ~/project/frontend
            npm run lint
      - save_cache:
          paths: [~/project/frontend/node_modules]
          key: frontend-build
  
  scan_backend:
    docker:
      - image: circleci/node:14.17.6
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: scan and install dependencies
          command: |
            cd ~/project/backend
            npm install
            npm audit fix
            npm install
      - run:
          name: lint source code
          command: |
            cd ~/project/backend
            npm run lint
      - save_cache:
          paths: [~/project/backend/node_modules]
          key: backend-build

  deploy_frontend:
    docker:
      - image: circleci/node:14.17.6
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: install ftp client
          command: |
            sudo apt-get install ncftp
      - restore_cache:
          keys: ['frontend-build']
      - attach_workspace:
          at: ~/
      - run: 
          name: build frontend
          command: |
            cd ~/project/frontend
            cat .env
            npm run build
            ncftpput -R -v -u $FTP_USER -p $FTP_PASSWORD $FTP_URL domains/isuzu-tpubon.com/public_html build/*

  build_gcp_backend_image:
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install docker-cli
          command: apk add docker-cli
      - restore_cache:
          keys: ['backend-build', 'gcloud-key']
      - run:
          name: Create GCP credential
          command: |
            json=$(cat \<<-END 
            {
              "type": "service_account", 
              "project_id": "tangpark", 
              "private_key_id": "${GCP_PRIV_ID}", 
              "private_key": "${GCP_PRIV_KEY}", 
              "client_email": "${GCP_CLIENT_EMAIL}",
              "client_id": "${GCP_CLIENT_ID}",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/tangpark-backend%40tangpark.iam.gserviceaccount.com"
            }
            END
            )
            echo "${json}"
            pwd
            mkdir -p ~/project/backend/.cred
            cd ~/project/backend/.cred
            echo "${json}" > ~/project/backend/.cred/tangpark.json
      - run:
          name: map data to environment file
          command: |
            cd ~/project/backend
            touch .env
            echo DB_URI=${DB_URI} > .env
            echo DB_USER=${DB_USER} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo DB_NAME=${DB_NAME} >> .env
      - run:
          name: Login docker
          command: |
            cd ~/project/backend/.cred
            gcloud auth activate-service-account tangpark-backend@tangpark.iam.gserviceaccount.com --key-file=tangpark.json
            gcloud auth configure-docker asia-southeast1-docker.pkg.dev 
      - run:
          name: Build backend image and run
          command: |
            cd ~/project/backend
            dockerpath="asia-southeast1-docker.pkg.dev/tangpark/tp-website/tp-website-backend"
            docker build --tag tp-website-backend:latest .
            echo "Docker ID and Image: $dockerpath"
            docker image tag tp-website-backend:latest ${dockerpath}:latest
            docker image push ${dockerpath}:latest
      - save_cache:
          paths: [~/project/backend/.cred]
          key: gcloud-key
      # docker run -d -p 3000:3000 -e ENV=DEBUG wasupont/tp-backend
  
  build_aws_backend_image:
    docker:
      - image: circleci/python:3.8.1
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - restore_cache:
          keys: ['backend-build']
      - run:
          name: Install dependencies
          command: |
            pip install awscli docker-compose
      - run:
          name: map data to environment file
          command: |
            cd ~/project/backend
            touch .env
            echo DB_URI=${DB_URI} > .env
            echo DB_USER=${DB_USER} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo DB_NAME=${DB_NAME} >> .env
      - run:
          name: build and push image to ECR
          command: |
            cd ~/project/backend
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j1g2j9e9
            docker build -t tp-website:latest .
            docker tag tp-website:latest public.ecr.aws/j1g2j9e9/tp-website:latest
            docker push public.ecr.aws/j1g2j9e9/tp-website:latest

  deploy_gcp_backend:
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys: ['gcloud-key']
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install docker-cli
          command: |
            apk add docker-cli
      - run: 
          name: Login GCP
          command: |
            cd ~/project/backend/.cred
            gcloud auth activate-service-account tangpark-backend@tangpark.iam.gserviceaccount.com --key-file=tangpark.json
      - cloud-run/init
      - cloud-run/deploy:
          args: '--max-instances=2 --port=3000'
          image: 'asia-southeast1-docker.pkg.dev/tangpark/tp-website/tp-website-backend:latest'
          platform: managed
          region: asia-southeast1
          service-name: "tangpark-backend@tangpark.iam.gserviceaccount.com"
          unauthenticated: true

  deploy_aws_backend:
    docker:
      - image: circleci/python:3.8.1
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install sed
      - kubernetes/install
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - run:
          name: Deploy VPC and SecurityGroup
          command: |
            aws cloudformation deploy --template-file .circleci/script/vpc.yaml --stack-name tp-website-vpc
      - run:
          name: Get VPC Output for EKS
          command: |
            export AWS_VPC=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)
            export AWS_SG=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SecurityGroups'].OutputValue" --output text)
            export AWS_Subnet_01=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SubnetId01'].OutputValue" --output text)
            export AWS_Subnet_02=$(aws cloudformation describe-stacks --stack-name tp-website-vpc --query "Stacks[0].Outputs[?OutputKey=='SubnetId02'].OutputValue" --output text)
            sed -i "s/AWS_VPC/${AWS_VPC}/" .circleci/script/eks.yaml
            sed -i "s/AWS_SG/${AWS_SG}/" .circleci/script/eks.yaml
            sed -i "s/AWS_Subnet_01/${AWS_Subnet_01}/" .circleci/script/eks.yaml
            sed -i "s/AWS_Subnet_02/${AWS_Subnet_02}/" .circleci/script/eks.yaml
      - run:
          name: Create EKS cluster
          command: |
            eksctl create cluster -f .circleci/script/eks.yaml
      - run:
          name: Apply deployment and service config
          command: |
            kubectl apply -f .circleci/script/deployment.yaml
            kubectl apply -f .circleci/script/service.yaml

  deploy_app_engine_backend:
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build', 'frontend-env']
      - run:
          name: Create GCP credential
          command: |
            json=$(cat \<<-END 
            {
              "type": "service_account", 
              "project_id": "tangpark", 
              "private_key_id": "${GCP_PRIV_ID}", 
              "private_key": "${GCP_PRIV_KEY}", 
              "client_email": "${GCP_CLIENT_EMAIL}",
              "client_id": "${GCP_CLIENT_ID}",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/tangpark-backend%40tangpark.iam.gserviceaccount.com"
            }
            END
            )
            echo "${json}"
            pwd
            mkdir -p ~/project/backend/.cred
            cd ~/project/backend/.cred
            echo "${json}" > ~/project/backend/.cred/tangpark.json
      - run: 
          name: Login GCP
          command: |
            cd ~/project/backend/.cred
            gcloud auth activate-service-account tangpark-backend@tangpark.iam.gserviceaccount.com --key-file=tangpark.json
      - run:
          name: map data to environment file
          command: |
            cd ~/project/backend
            touch .env
            echo DB_URI=${DB_URI} > .env
            echo DB_USER=${DB_USER} >> .env
            echo DB_PASSWORD=${DB_PASSWORD} >> .env
            echo DB_NAME=${DB_NAME} >> .env
      - run:
          name: Deploy on Google Cloud App Engine
          command: |
            cd ~/project/backend
            gcloud config set project tangpark
            gcloud app deploy
      - run: 
          name: Export app engine info
          command: |
            cd ~/project/frontend
            echo PORT=8080 > .env
            echo REACT_APP_BACKEND_API=https://$(gcloud app describe --format="value(defaultHostname)") >> .env
            cat .env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
workflows:
  default:
    jobs:
      - scan_backend
      - scan_and_build_frontend
      - docker/hadolint:
          dockerfiles: backend/Dockerfile
      - deploy_app_engine_backend:
          requires: [scan_backend, docker/hadolint]
          filters:
            branches:
              only: main
      - build_gcp_backend_image:
          requires: [scan_backend, docker/hadolint]
          filters:
            branches:
              only: main-docker
      - deploy_gcp_backend:
          requires: [build_gcp_backend_image]
      - deploy_frontend:
          requires: [deploy_app_engine_backend]
          filters:
            branches:
              only: main